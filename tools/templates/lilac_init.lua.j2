-- tools/templates/lilac_init.lua.j2
local M = {}
M._opts = {
  transparent = true,
  integrations = { treesitter = true, telescope = true, gitsigns = true, lsp_trouble = true },
}

function M.setup(opts)
  M._opts = vim.tbl_deep_extend("force", M._opts, opts or {})
end

local function apply_term16(t)
  if not t then return end
  for i = 0, 15 do vim.g["terminal_color_" .. i] = t[i + 1] end
end

local FLAVORS = require("lilac.flavors").index  -- generated by tools/gen.py

-- Resolve YAML values at runtime:
--   "@C.<name>"   -> C[<name>]    (Catppuccin palette color)
--   "@comment"    -> comment_fg   (variant-specific comment tone)
local function resolve_value(v, C, comment_fg)
  if type(v) ~= "string" then return v end
  if v:sub(1,3) == "@C." then
    local key = v:sub(4)
    return C[key]
  elseif v == "@comment" then
    return comment_fg
  else
    return v
  end
end

local function resolve_entry(tbl, C, comment_fg)
  if type(tbl) ~= "table" then return tbl end
  local out = {}
  for k, v in pairs(tbl) do
    out[k] = resolve_value(v, C, comment_fg)
  end
  return out
end

-- Common, shared highlights from _common.yml (kept as literal; resolved at runtime)
local COMMON_HL = {{ common_highlights | luadump }}

function M.load(id)
  local cfg = FLAVORS[id]
  if not cfg then
    vim.notify("lilac: unknown palette '" .. tostring(id) .. "'", vim.log.levels.ERROR)
    return
  end

  local ok, capp = pcall(require, "catppuccin")
  if not ok then
    vim.notify("lilac: requires catppuccin/nvim", vim.log.levels.ERROR)
    return
  end

  -- Ensure Catppuccin chooses the right flavour internally.
  vim.g.catppuccin_flavour = cfg.variant

  capp.setup({
    flavour = cfg.variant,
    transparent_background = M._opts.transparent,
    term_colors = true,
    integrations = M._opts.integrations,
    color_overrides = { [cfg.variant] = cfg.cat_overrides or {} },

    custom_highlights = function(C)
      -- Variant-specific comment tone (mirrors your old behavior).
      local flav = (vim.g.catppuccin_flavour or cfg.variant):lower()
      local comment_fg = cfg.comment or ((flav == "mocha") and "#6b7093" or "#848faa")

      -- Start with COMMON_HL (resolved)
      local ch = {}
      for group, attrs in pairs(COMMON_HL or {}) do
        ch[group] = resolve_entry(attrs, C, comment_fg)
      end

      -- Merge per-flavor highlights from YAML (resolved)
      for group, attrs in pairs(cfg.highlights or {}) do
        ch[group] = resolve_entry(attrs, C, comment_fg)
      end

      return ch
    end,
  })

  -- Use a single scheme name to avoid variant timing races
  vim.cmd("colorscheme catppuccin")

  -- Apply your 16-color terminal palette
  apply_term16(cfg.terminal.colors)

  -- Identify the active scheme as lilac-*
  vim.g.colors_name = id
end

function M.toggle_transparent()
  M._opts.transparent = not M._opts.transparent
  if (vim.g.colors_name or ""):match("^lilac%-") then
    M.load(vim.g.colors_name)
  end
end

return M
