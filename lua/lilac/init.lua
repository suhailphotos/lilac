
local M = {}
M._opts = {
  transparent = true,
  integrations = { treesitter = true, telescope = true, gitsigns = true, lsp_trouble = true },
}

function M.setup(opts)
  M._opts = vim.tbl_deep_extend("force", M._opts, opts or {})
end

local function apply_term16(t)
  if not t then return end
  for i = 0, 15 do vim.g["terminal_color_" .. i] = t[i + 1] end
end

local FLAVORS = require("lilac.flavors").index  -- generated by tools/gen.py

local function custom_highlights_factory(user_ch)
  return function(C)
    local ch = {
      Comment      = { fg = C.overlay1, italic = false },
      ["@comment"] = { fg = C.overlay1, italic = false },
      StatusLine   = { fg = C.overlay2, bg = "NONE", bold = false },
      StatusLineNC = { fg = C.surface2, bg = "NONE" },
      MsgArea      = { fg = C.overlay2, bg = "NONE" },
      WinSeparator = { fg = C.surface1, bg = "NONE" },
    }
    for k, v in pairs(user_ch or {}) do ch[k] = v end
    return ch
  end
end

function M.load(id)
  local cfg = FLAVORS[id]
  if not cfg then
    vim.notify("lilac: unknown palette '" .. tostring(id) .. "'", vim.log.levels.ERROR)
    return
  end

  local ok, capp = pcall(require, "catppuccin")
  if not ok then
    vim.notify("lilac: requires catppuccin/nvim", vim.log.levels.ERROR)
    return
  end

  -- Make sure Catppuccin knows which flavor to use
  vim.g.catppuccin_flavour = cfg.variant

  capp.setup({
    flavour = cfg.variant,
    transparent_background = M._opts.transparent,
    term_colors = true,
    integrations = M._opts.integrations,
    color_overrides = { [cfg.variant] = cfg.cat_overrides or {} },
    custom_highlights = custom_highlights_factory(cfg.highlights),
  })

  -- Use the single, always-present scheme name
  vim.cmd("colorscheme catppuccin")

  -- Apply your 16-color terminal palette
  apply_term16(cfg.terminal.colors)

  -- Identify the active scheme as lilac-*
  vim.g.colors_name = id
end

function M.toggle_transparent()
  M._opts.transparent = not M._opts.transparent
  if (vim.g.colors_name or ""):match("^lilac%-") then
    M.load(vim.g.colors_name)
  end
end

return M
